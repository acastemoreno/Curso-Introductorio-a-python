#+TITLE: Curso Introductorio a Python
#+SUBTITLE: Para: Control System Integration 
#+DATE: 2018/01/05（Viernes）2:00pm
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 25.2.1
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: es
#+SELECT_TAGS: export

#+FAVICON: images/python-logo.png
#+ICON: images/python-logo.png

* Qué es Python?
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Recurso
[[http://www.dsf.unica.it/~fiore/LearningPython.pdf][Learning Python]]
**  
Python es un lenguaje de programación multiparadigma - Soporta programación =orientada a objetos=, =programación imperativa= y en menor medida =programación funcional=.

Es un lenguaje:
- =interpretado=: La computadora va traduciendo el codigo a binario a medida que se ejecuta; esta traducción no se guarda.
- de =tipado dinamico=: Una variable puede tomar valores de distintos tipos (numeros, textos, listas ...)
- =multiplataforma=: Puede ser ejecutado en muchos sistemas informaticos distintos mientras exista un interprete de el sistema.

** Instalación
Python3:
- 32 bits: [[https://www.python.org/ftp/python/3.6.4/python-3.6.4.exe][Instalador Python3.6.4x86]]
- 64 bits: [[https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe][Instalador Python3.6.4x64]]

Editor de texto:
- [[https://atom.io/][Atom]]

** Importante. Marcar Add Python to Path
#+BEGIN_CENTER
#+ATTR_HTML: :width 650px
[[file:images/path_python.png]]
#+END_CENTER

** Ingresando y saliendo de la terminal
#+BEGIN_SRC python
$ python
>>> quit()
$
#+END_SRC

** Instalamos Jupyter
[[http://jupyter.org/install.html]]

#+BEGIN_SRC cmd
$ python -m pip install --upgrade pip
$ python -m pip install jupyter
$ jupyter notebook   #Ingresamos a una interface web
#+END_SRC
** Numeros
#+BEGIN_SRC python
>>> 123 + 222 #Adición de enteros
345
>>> 1.5 * 4 # Multiplicación de punto flotante
6.0
>>> 2 ** 100 # 2 elevado al exponente 100
1267650600228229401496703205376
>>> import math
>>> math.pi
3.141592653589793
>>> math.sqrt(85)
9.219544457292887
#+END_SRC

** Strings
Strings son usados para guardar información textual y como colección de =bytes= (Como el contenido de una imagen).
Es el primer ejemplo de lo que llamamos en python, =secuencia=, una colección de elementos ordenados posicionados con respectos de otros.
#+BEGIN_SRC python
>>> C = 'Control'
>>> len(C)
7
>>> C[0]
'C'
>>> C[1]
'o'
#+END_SRC

** Tomando elementos a un String 
#+BEGIN_SRC python
>>> C[len(C)-1]
'l'
>>> C[-1]
'l'
>>> C[-2]
'o'
>>> C
'Control'
>>> C[1:3]
'on'
>>> C[1:]
'ontrol'
>>> C[:6]
'Contro'
#+END_SRC
** Agregando elementos a un string
#+BEGIN_SRC python
>>> C
'Control'
>>> C + ' System'
'Control System'
>>> C
'Control'
>>> C * 8
'ControlControlControlControlControlControlControlControl'
#+END_SRC

** Inmutabilidad en Strings
#+BEGIN_SRC python
>>> C
'Control'
>>> C[0]='Z'
TypeError: 'str' object does not support item assignment
>>> C = 'Z' + C[1:]
>>> C
'Zontrol'
#+END_SRC
** Metodos del Tipo String
#+BEGIN_SRC python
>>> C = 'Control'
>>> C.find('tr')
3
>>> C.replace('tr', 'XYZ')
'ConXYZol'
>>> C
'Control'
#+END_SRC

** Listas
Las listas son colecciones ordenadas de objectos de tipo arbritrario. A diferencia de los strings, estos si son mutables.
#+BEGIN_SRC python
>>> L = [1, 'Control', 10.5]
>>> len(L)
3
>>> L[0]
1
>>> L[:-1]
[1, 'Control']
>>> L + [4,5,6]
[1, 'Control', 10.5, 4, 5, 6]
>>> L
[1, 'Control', 10.5]
#+END_SRC

** Metodos del tipo Lista
#+BEGIN_SRC python
>>> L.append('SI')
>>> L
[1, 'Control', 10.5, 'SI']
>>> L.pop(2)
10.5
>>> L
[1, 'Control', 'SI']
>>> M.reverse()
['SI', 'Control', 1]
>>> M = ['bb', 'aa', 'cc']
>>> M.sort()
>>> M
['aa', 'bb', 'cc']
#+END_SRC
** Anidamiento de listas
#+BEGIN_SRC python
>>> M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> M[1]
[4, 5, 6]
>>> M[1][2]
6
#+END_SRC
** =Comprehensions=
#+BEGIN_SRC python
>>> col2 = [fila[1] for fila in M]
>>> col2
[2,5,8]
>>> [fila[1] + 1 for fila in M]
[3,6,9]
>>> [fila[1] for fila in M if fila[1] % 2 == 0]
[2, 8]
-----
>>> diagonal = [M[i][i] for i in [0, 1, 2]]
>>> diagonal
[1, 5, 9] 
#+END_SRC
** =Comprenhensions=
#+BEGIN_SRC python
>>> list(range(4))
[0,1,2,3]
>>> list(range(-6,7,2)
[-6, -4, -2, 0, 2, 4, 6]
>>> [[x ** 2, x ** 3] for rang(4)]
[[0, 0], [1, 1], [4, 8], [9, 27]]
>>> [[x, x / 2, x * 2] for x in range(-6,7,2) if x>0]
#+END_SRC

** Diccionarios
Los diccionarios son una coleccion de otros objetos pero guardados en relacion a ciertas =llaves=
#+BEGIN_SRC python
>>> D = {'nombre': 'Albert', 'edad': 26, 'apellidos': "Castellano Moreno"}
>>> D['nombre']
'Albert'
>>> D['edad'] += 1
>>> D
{'nombre': 'Albert', 'edad': 27, 'apellidos': 'Castellano Moreno'}
-----
>>> D = {}
>>> D['calle'] = 'Las Oropendolas'
>>> D['numero'] = 149
>>> D
{'calle': 'Las Oropendolas', 'numero': 149}
#+END_SRC
* Gracias ˊ・ω・ˋ
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes

[fn:1] [[https://www.digitalocean.com/community/tutorials/python-2-vs-python-3-practical-considerations-2][Python2 vs Python3]]
